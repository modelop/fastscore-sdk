/**
 * FastScore API (proxy)
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.opendatagroup.fastscore.swagger.api2

import com.opendatagroup.fastscore.swagger.models2.ActiveSensorInfo
import com.opendatagroup.fastscore.swagger.models2.InlineResponse200
import com.opendatagroup.fastscore.swagger.models2.SensorDescriptor
import com.opendatagroup.fastscore.swagger.invoker2.ApiInvoker
import com.opendatagroup.fastscore.swagger.invoker2.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class ModelManageApi(val defBasePath: String = "https://localhost/api/1/service",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * 
   * @param instance instance name 
   * @param desc sensor descriptor 
   * @return InlineResponse200
   */
  def activeSensorInstall(instance: String, desc: SensorDescriptor): Option[InlineResponse200] = {
    // create path and map variables
    val path = "/{instance}/2/active/sensor".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ModelManageApi->activeSensorInstall")

    if (desc == null) throw new Exception("Missing required parameter 'desc' when calling ModelManageApi->activeSensorInstall")

    

    var postBody:AnyRef = desc.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse200]).asInstanceOf[InlineResponse200])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @return List[ActiveSensorInfo]
   */
  def activeSensorList(instance: String): Option[List[ActiveSensorInfo]] = {
    // create path and map variables
    val path = "/{instance}/2/active/sensor".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ModelManageApi->activeSensorList")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[ActiveSensorInfo]).asInstanceOf[List[ActiveSensorInfo]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @return List[String]
   */
  def activeSensorPoints(instance: String): Option[List[String]] = {
    // create path and map variables
    val path = "/{instance}/2/active/sensor/points".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ModelManageApi->activeSensorPoints")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[String]).asInstanceOf[List[String]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param tapId installed sensor id 
   * @return void
   */
  def activeSensorUninstall(instance: String, tapId: Integer) = {
    // create path and map variables
    val path = "/{instance}/2/active/sensor/{tap-id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance)).replaceAll("\\{" + "tap-id" + "\\}",apiInvoker.escape(tapId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ModelManageApi->activeSensorUninstall")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
