/**
 * FastScore API (proxy)
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.opendatagroup.fastscore.swagger.api1

import com.opendatagroup.fastscore.swagger.models1.HealthInfo
import com.opendatagroup.fastscore.swagger.models1.InlineResponse200
import com.opendatagroup.fastscore.swagger.models1.InlineResponse2001
import com.opendatagroup.fastscore.swagger.models1.InlineResponse2002
import com.opendatagroup.fastscore.swagger.models1.InstanceInfo
import com.opendatagroup.fastscore.swagger.invoker1.ApiInvoker
import com.opendatagroup.fastscore.swagger.invoker1.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class ConnectApi(val defBasePath: String = "https://localhost/api/1/service",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * 
   * @param instance instance name 
   * @param desc sensor descriptor 
   * @return InlineResponse2001
   */
  def activeSensorAttach(instance: String, desc: Any): Option[InlineResponse2001] = {
    // create path and map variables
    val path = "/{instance}/1/control/sensor".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->activeSensorAttach")

    

    var postBody:AnyRef = desc.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2001]).asInstanceOf[InlineResponse2001])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @return List[String]
   */
  def activeSensorAvailable(instance: String): Option[List[String]] = {
    // create path and map variables
    val path = "/{instance}/1/control/sensor/available".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->activeSensorAvailable")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[String]).asInstanceOf[List[String]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param tapId The identifier of the sensor connection 
   * @return InlineResponse2002
   */
  def activeSensorDescribe(instance: String, tapId: Integer): Option[InlineResponse2002] = {
    // create path and map variables
    val path = "/{instance}/1/control/sensor/{tap-id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance)).replaceAll("\\{" + "tap-id" + "\\}",apiInvoker.escape(tapId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->activeSensorDescribe")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[InlineResponse2002]).asInstanceOf[InlineResponse2002])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param tapId The identifier of the sensor connection 
   * @return void
   */
  def activeSensorDetach(instance: String, tapId: Integer) = {
    // create path and map variables
    val path = "/{instance}/1/control/sensor/{tap-id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance)).replaceAll("\\{" + "tap-id" + "\\}",apiInvoker.escape(tapId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->activeSensorDetach")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @return List[InlineResponse200]
   */
  def activeSensorList(instance: String): Option[List[InlineResponse200]] = {
    // create path and map variables
    val path = "/{instance}/1/control/sensor".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->activeSensorList")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[InlineResponse200]).asInstanceOf[List[InlineResponse200]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param q Request only the named section (optional)
   * @param accept Force Accept header value (optional)
   * @return Any
   */
  def configGet(instance: String, q: Option[String] = None, accept: Option[String] = None): Option[Any] = {
    // create path and map variables
    val path = "/{instance}/1/config".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->configGet")

    q.map(paramVal => queryParams += "q" -> paramVal.toString)
    
    accept.map(paramVal => headerParams += "Accept" -> paramVal)

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param config The FastScore Configuration 
   * @param _contentType configuration MIME type (optional)
   * @return void
   */
  def configPut(instance: String, config: String, _contentType: Option[String] = None) = {
    // create path and map variables
    val path = "/{instance}/1/config".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->configPut")

    if (config == null) throw new Exception("Missing required parameter 'config' when calling ConnectApi->configPut")

    
    _contentType.map(paramVal => headerParams += "Content-Type" -> paramVal)

    var postBody:AnyRef = config.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param name Return info for the named service only (optional)
   * @param api Return only services providing the named API (optional)
   * @param host Return only services running on the named host (optional)
   * @param port Return only services that use this port (optional)
   * @param release Return only services that run the specific release (optional)
   * @param health Return only services with the given health status (optional)
   * @param fields A comma-separated list of fields to fields (optional)
   * @return List[InstanceInfo]
   */
  def connectGet(instance: String, name: Option[String] = None, api: Option[String] = None, host: Option[String] = None, port: Option[Integer] = None, release: Option[String] = None, health: Option[String] = None, fields: Option[String] = None): Option[List[InstanceInfo]] = {
    // create path and map variables
    val path = "/{instance}/1/connect".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->connectGet")

    name.map(paramVal => queryParams += "name" -> paramVal.toString)
    api.map(paramVal => queryParams += "api" -> paramVal.toString)
    host.map(paramVal => queryParams += "host" -> paramVal.toString)
    port.map(paramVal => queryParams += "port" -> paramVal.toString)
    release.map(paramVal => queryParams += "release" -> paramVal.toString)
    health.map(paramVal => queryParams += "health" -> paramVal.toString)
    fields.map(paramVal => queryParams += "return" -> paramVal.toString)
    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[InstanceInfo]).asInstanceOf[List[InstanceInfo]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @return HealthInfo
   */
  def healthGet(instance: String): Option[HealthInfo] = {
    // create path and map variables
    val path = "/{instance}/1/health".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->healthGet")

    

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[HealthInfo]).asInstanceOf[HealthInfo])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * 
   * @param instance instance name 
   * @param accept Force Accept header value (optional)
   * @return Any
   */
  def swaggerGet(instance: String, accept: Option[String] = None): Option[Any] = {
    // create path and map variables
    val path = "/{instance}/1/swagger".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "instance" + "\\}",apiInvoker.escape(instance))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (instance == null) throw new Exception("Missing required parameter 'instance' when calling ConnectApi->swaggerGet")

    
    accept.map(paramVal => headerParams += "Accept" -> paramVal)

    var postBody:AnyRef = null.asInstanceOf[AnyRef]

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[Any]).asInstanceOf[Any])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
